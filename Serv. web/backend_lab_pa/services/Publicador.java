
package services;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.3.0.2
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Publicador", targetNamespace = "http://services/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Publicador {


    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "saludar", targetNamespace = "http://services/", className = "services.Saludar")
    @ResponseWrapper(localName = "saludarResponse", targetNamespace = "http://services/", className = "services.SaludarResponse")
    @Action(input = "http://services/Publicador/saludarRequest", output = "http://services/Publicador/saludarResponse")
    public String saludar();

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "modificarCantidadItemCarrito", targetNamespace = "http://services/", className = "services.ModificarCantidadItemCarrito")
    @ResponseWrapper(localName = "modificarCantidadItemCarritoResponse", targetNamespace = "http://services/", className = "services.ModificarCantidadItemCarritoResponse")
    @Action(input = "http://services/Publicador/modificarCantidadItemCarritoRequest", output = "http://services/Publicador/modificarCantidadItemCarritoResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://services/Publicador/modificarCantidadItemCarrito/Fault/UsuarioNoExisteException")
    })
    public void modificarCantidadItemCarrito(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        int arg2)
        throws UsuarioNoExisteException_Exception
    ;

    /**
     * 
     */
    @WebMethod
    @RequestWrapper(localName = "crearCasos", targetNamespace = "http://services/", className = "services.CrearCasos")
    @ResponseWrapper(localName = "crearCasosResponse", targetNamespace = "http://services/", className = "services.CrearCasosResponse")
    @Action(input = "http://services/Publicador/crearCasosRequest", output = "http://services/Publicador/crearCasosResponse")
    public void crearCasos();

    /**
     * 
     * @return
     *     returns java.util.List<services.DtUsuario>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "listarUsuarios", targetNamespace = "http://services/", className = "services.ListarUsuarios")
    @ResponseWrapper(localName = "listarUsuariosResponse", targetNamespace = "http://services/", className = "services.ListarUsuariosResponse")
    @Action(input = "http://services/Publicador/listarUsuariosRequest", output = "http://services/Publicador/listarUsuariosResponse")
    public List<DtUsuario> listarUsuarios();

    /**
     * 
     * @return
     *     returns java.util.List<services.DtCliente>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "listarClientes", targetNamespace = "http://services/", className = "services.ListarClientes")
    @ResponseWrapper(localName = "listarClientesResponse", targetNamespace = "http://services/", className = "services.ListarClientesResponse")
    @Action(input = "http://services/Publicador/listarClientesRequest", output = "http://services/Publicador/listarClientesResponse")
    public List<DtCliente> listarClientes();

    /**
     * 
     * @return
     *     returns java.util.List<services.DtProveedor>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "listarProveedores", targetNamespace = "http://services/", className = "services.ListarProveedores")
    @ResponseWrapper(localName = "listarProveedoresResponse", targetNamespace = "http://services/", className = "services.ListarProveedoresResponse")
    @Action(input = "http://services/Publicador/listarProveedoresRequest", output = "http://services/Publicador/listarProveedoresResponse")
    public List<DtProveedor> listarProveedores();

    /**
     * 
     * @return
     *     returns java.util.List<services.DtProductoDetallado>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "listarAllProductos", targetNamespace = "http://services/", className = "services.ListarAllProductos")
    @ResponseWrapper(localName = "listarAllProductosResponse", targetNamespace = "http://services/", className = "services.ListarAllProductosResponse")
    @Action(input = "http://services/Publicador/listarAllProductosRequest", output = "http://services/Publicador/listarAllProductosResponse")
    public List<DtProductoDetallado> listarAllProductos();

    /**
     * 
     * @param arg0
     * @return
     *     returns byte[]
     * @throws IOException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getImagen", targetNamespace = "http://services/", className = "services.GetImagen")
    @ResponseWrapper(localName = "getImagenResponse", targetNamespace = "http://services/", className = "services.GetImagenResponse")
    @Action(input = "http://services/Publicador/getImagenRequest", output = "http://services/Publicador/getImagenResponse", fault = {
        @FaultAction(className = IOException_Exception.class, value = "http://services/Publicador/getImagen/Fault/IOException")
    })
    public byte[] getImagen(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws IOException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<byte[]>
     * @throws IOException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getImagenes", targetNamespace = "http://services/", className = "services.GetImagenes")
    @ResponseWrapper(localName = "getImagenesResponse", targetNamespace = "http://services/", className = "services.GetImagenesResponse")
    @Action(input = "http://services/Publicador/getImagenesRequest", output = "http://services/Publicador/getImagenesResponse", fault = {
        @FaultAction(className = IOException_Exception.class, value = "http://services/Publicador/getImagenes/Fault/IOException")
    })
    public List<byte[]> getImagenes(
        @WebParam(name = "arg0", targetNamespace = "")
        List<String> arg0)
        throws IOException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns services.DtUsuarioDetallado
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getDTUsuarioActual", targetNamespace = "http://services/", className = "services.GetDTUsuarioActual")
    @ResponseWrapper(localName = "getDTUsuarioActualResponse", targetNamespace = "http://services/", className = "services.GetDTUsuarioActualResponse")
    @Action(input = "http://services/Publicador/getDTUsuarioActualRequest", output = "http://services/Publicador/getDTUsuarioActualResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://services/Publicador/getDTUsuarioActual/Fault/UsuarioNoExisteException")
    })
    public DtUsuarioDetallado getDTUsuarioActual(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws UsuarioNoEncontrado_Exception
     * @throws ContraseniaIncorrectaException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "iniciarSesion", targetNamespace = "http://services/", className = "services.IniciarSesion")
    @ResponseWrapper(localName = "iniciarSesionResponse", targetNamespace = "http://services/", className = "services.IniciarSesionResponse")
    @Action(input = "http://services/Publicador/iniciarSesionRequest", output = "http://services/Publicador/iniciarSesionResponse", fault = {
        @FaultAction(className = ContraseniaIncorrectaException_Exception.class, value = "http://services/Publicador/iniciarSesion/Fault/ContraseniaIncorrectaException"),
        @FaultAction(className = UsuarioNoEncontrado_Exception.class, value = "http://services/Publicador/iniciarSesion/Fault/UsuarioNoEncontrado")
    })
    public void iniciarSesion(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1)
        throws ContraseniaIncorrectaException_Exception, UsuarioNoEncontrado_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @param arg10
     * @param arg7
     * @param arg6
     * @param arg9
     * @param arg8
     * @return
     *     returns boolean
     * @throws UsuarioRepetidoException_Exception
     * @throws IOException_Exception
     * @throws ContraseniaIncorrectaException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "altaUsuarioCliente", targetNamespace = "http://services/", className = "services.AltaUsuarioCliente")
    @ResponseWrapper(localName = "altaUsuarioClienteResponse", targetNamespace = "http://services/", className = "services.AltaUsuarioClienteResponse")
    @Action(input = "http://services/Publicador/altaUsuarioClienteRequest", output = "http://services/Publicador/altaUsuarioClienteResponse", fault = {
        @FaultAction(className = UsuarioRepetidoException_Exception.class, value = "http://services/Publicador/altaUsuarioCliente/Fault/UsuarioRepetidoException"),
        @FaultAction(className = ContraseniaIncorrectaException_Exception.class, value = "http://services/Publicador/altaUsuarioCliente/Fault/ContraseniaIncorrectaException"),
        @FaultAction(className = IOException_Exception.class, value = "http://services/Publicador/altaUsuarioCliente/Fault/IOException")
    })
    public boolean altaUsuarioCliente(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        int arg4,
        @WebParam(name = "arg5", targetNamespace = "")
        int arg5,
        @WebParam(name = "arg6", targetNamespace = "")
        int arg6,
        @WebParam(name = "arg7", targetNamespace = "")
        String arg7,
        @WebParam(name = "arg8", targetNamespace = "")
        byte[] arg8,
        @WebParam(name = "arg9", targetNamespace = "")
        String arg9,
        @WebParam(name = "arg10", targetNamespace = "")
        String arg10)
        throws ContraseniaIncorrectaException_Exception, IOException_Exception, UsuarioRepetidoException_Exception
    ;

    /**
     * 
     * @param arg7
     * @param arg6
     * @param arg9
     * @param arg8
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @param arg10
     * @param arg11
     * @param arg12
     * @return
     *     returns boolean
     * @throws UsuarioRepetidoException_Exception
     * @throws IOException_Exception
     * @throws ContraseniaIncorrectaException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "altaUsuarioProveedor", targetNamespace = "http://services/", className = "services.AltaUsuarioProveedor")
    @ResponseWrapper(localName = "altaUsuarioProveedorResponse", targetNamespace = "http://services/", className = "services.AltaUsuarioProveedorResponse")
    @Action(input = "http://services/Publicador/altaUsuarioProveedorRequest", output = "http://services/Publicador/altaUsuarioProveedorResponse", fault = {
        @FaultAction(className = UsuarioRepetidoException_Exception.class, value = "http://services/Publicador/altaUsuarioProveedor/Fault/UsuarioRepetidoException"),
        @FaultAction(className = ContraseniaIncorrectaException_Exception.class, value = "http://services/Publicador/altaUsuarioProveedor/Fault/ContraseniaIncorrectaException"),
        @FaultAction(className = IOException_Exception.class, value = "http://services/Publicador/altaUsuarioProveedor/Fault/IOException")
    })
    public boolean altaUsuarioProveedor(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        int arg4,
        @WebParam(name = "arg5", targetNamespace = "")
        int arg5,
        @WebParam(name = "arg6", targetNamespace = "")
        int arg6,
        @WebParam(name = "arg7", targetNamespace = "")
        String arg7,
        @WebParam(name = "arg8", targetNamespace = "")
        String arg8,
        @WebParam(name = "arg9", targetNamespace = "")
        String arg9,
        @WebParam(name = "arg10", targetNamespace = "")
        byte[] arg10,
        @WebParam(name = "arg11", targetNamespace = "")
        String arg11,
        @WebParam(name = "arg12", targetNamespace = "")
        String arg12)
        throws ContraseniaIncorrectaException_Exception, IOException_Exception, UsuarioRepetidoException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     * @throws UsuarioRepetidoException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "registro", targetNamespace = "http://services/", className = "services.Registro")
    @ResponseWrapper(localName = "registroResponse", targetNamespace = "http://services/", className = "services.RegistroResponse")
    @Action(input = "http://services/Publicador/registroRequest", output = "http://services/Publicador/registroResponse", fault = {
        @FaultAction(className = UsuarioRepetidoException_Exception.class, value = "http://services/Publicador/registro/Fault/UsuarioRepetidoException")
    })
    public boolean registro(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1)
        throws UsuarioRepetidoException_Exception
    ;

    /**
     * 
     * @return
     *     returns int
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "generarCodigoOrden", targetNamespace = "http://services/", className = "services.GenerarCodigoOrden")
    @ResponseWrapper(localName = "generarCodigoOrdenResponse", targetNamespace = "http://services/", className = "services.GenerarCodigoOrdenResponse")
    @Action(input = "http://services/Publicador/generarCodigoOrdenRequest", output = "http://services/Publicador/generarCodigoOrdenResponse")
    public int generarCodigoOrden();

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<services.DtCantidad>
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCarritoActual", targetNamespace = "http://services/", className = "services.GetCarritoActual")
    @ResponseWrapper(localName = "getCarritoActualResponse", targetNamespace = "http://services/", className = "services.GetCarritoActualResponse")
    @Action(input = "http://services/Publicador/getCarritoActualRequest", output = "http://services/Publicador/getCarritoActualResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://services/Publicador/getCarritoActual/Fault/UsuarioNoExisteException")
    })
    public List<DtCantidad> getCarritoActual(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "eliminarItemCarrito", targetNamespace = "http://services/", className = "services.EliminarItemCarrito")
    @ResponseWrapper(localName = "eliminarItemCarritoResponse", targetNamespace = "http://services/", className = "services.EliminarItemCarritoResponse")
    @Action(input = "http://services/Publicador/eliminarItemCarritoRequest", output = "http://services/Publicador/eliminarItemCarritoResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://services/Publicador/eliminarItemCarrito/Fault/UsuarioNoExisteException")
    })
    public void eliminarItemCarrito(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1)
        throws UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg4
     * @param arg1
     * @param arg0
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "realizarCompra", targetNamespace = "http://services/", className = "services.RealizarCompra")
    @ResponseWrapper(localName = "realizarCompraResponse", targetNamespace = "http://services/", className = "services.RealizarCompraResponse")
    @Action(input = "http://services/Publicador/realizarCompraRequest", output = "http://services/Publicador/realizarCompraResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://services/Publicador/realizarCompra/Fault/UsuarioNoExisteException")
    })
    public void realizarCompra(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        DtFecha arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        DetallesEnvio arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        FormaPago arg4)
        throws UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns services.DtProductoDetallado
     * @throws ProductoNoExisteException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getDetallesProducto", targetNamespace = "http://services/", className = "services.GetDetallesProducto")
    @ResponseWrapper(localName = "getDetallesProductoResponse", targetNamespace = "http://services/", className = "services.GetDetallesProductoResponse")
    @Action(input = "http://services/Publicador/getDetallesProductoRequest", output = "http://services/Publicador/getDetallesProductoResponse", fault = {
        @FaultAction(className = ProductoNoExisteException_Exception.class, value = "http://services/Publicador/getDetallesProducto/Fault/ProductoNoExisteException")
    })
    public DtProductoDetallado getDetallesProducto(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0)
        throws ProductoNoExisteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "usuarioHaCompradoProducto", targetNamespace = "http://services/", className = "services.UsuarioHaCompradoProducto")
    @ResponseWrapper(localName = "usuarioHaCompradoProductoResponse", targetNamespace = "http://services/", className = "services.UsuarioHaCompradoProductoResponse")
    @Action(input = "http://services/Publicador/usuarioHaCompradoProductoRequest", output = "http://services/Publicador/usuarioHaCompradoProductoResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://services/Publicador/usuarioHaCompradoProducto/Fault/Exception")
    })
    public boolean usuarioHaCompradoProducto(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1)
        throws Exception_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<services.DtComentario>
     * @throws ProductoNoExisteException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "obtenerComentariosProducto", targetNamespace = "http://services/", className = "services.ObtenerComentariosProducto")
    @ResponseWrapper(localName = "obtenerComentariosProductoResponse", targetNamespace = "http://services/", className = "services.ObtenerComentariosProductoResponse")
    @Action(input = "http://services/Publicador/obtenerComentariosProductoRequest", output = "http://services/Publicador/obtenerComentariosProductoResponse", fault = {
        @FaultAction(className = ProductoNoExisteException_Exception.class, value = "http://services/Publicador/obtenerComentariosProducto/Fault/ProductoNoExisteException")
    })
    public List<DtComentario> obtenerComentariosProducto(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0)
        throws ProductoNoExisteException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @throws ProductoNoExisteException_Exception
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "agregarComentarioAProducto", targetNamespace = "http://services/", className = "services.AgregarComentarioAProducto")
    @ResponseWrapper(localName = "agregarComentarioAProductoResponse", targetNamespace = "http://services/", className = "services.AgregarComentarioAProductoResponse")
    @Action(input = "http://services/Publicador/agregarComentarioAProductoRequest", output = "http://services/Publicador/agregarComentarioAProductoResponse", fault = {
        @FaultAction(className = ProductoNoExisteException_Exception.class, value = "http://services/Publicador/agregarComentarioAProducto/Fault/ProductoNoExisteException"),
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://services/Publicador/agregarComentarioAProducto/Fault/UsuarioNoExisteException")
    })
    public void agregarComentarioAProducto(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        int arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        String arg4,
        @WebParam(name = "arg5", targetNamespace = "")
        int arg5)
        throws ProductoNoExisteException_Exception, UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @throws ProductoNoExisteException_Exception
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "agregarRespuestaAUnComentario", targetNamespace = "http://services/", className = "services.AgregarRespuestaAUnComentario")
    @ResponseWrapper(localName = "agregarRespuestaAUnComentarioResponse", targetNamespace = "http://services/", className = "services.AgregarRespuestaAUnComentarioResponse")
    @Action(input = "http://services/Publicador/agregarRespuestaAUnComentarioRequest", output = "http://services/Publicador/agregarRespuestaAUnComentarioResponse", fault = {
        @FaultAction(className = ProductoNoExisteException_Exception.class, value = "http://services/Publicador/agregarRespuestaAUnComentario/Fault/ProductoNoExisteException"),
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://services/Publicador/agregarRespuestaAUnComentario/Fault/UsuarioNoExisteException")
    })
    public void agregarRespuestaAUnComentario(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        int arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        String arg4,
        @WebParam(name = "arg5", targetNamespace = "")
        int arg5)
        throws ProductoNoExisteException_Exception, UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns services.DtOrdenDeCompra
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getOrdenPorId", targetNamespace = "http://services/", className = "services.GetOrdenPorId")
    @ResponseWrapper(localName = "getOrdenPorIdResponse", targetNamespace = "http://services/", className = "services.GetOrdenPorIdResponse")
    @Action(input = "http://services/Publicador/getOrdenPorIdRequest", output = "http://services/Publicador/getOrdenPorIdResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://services/Publicador/getOrdenPorId/Fault/Exception")
    })
    public DtOrdenDeCompra getOrdenPorId(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0)
        throws Exception_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<services.DtCantidad>
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getDTCantidadOrden", targetNamespace = "http://services/", className = "services.GetDTCantidadOrden")
    @ResponseWrapper(localName = "getDTCantidadOrdenResponse", targetNamespace = "http://services/", className = "services.GetDTCantidadOrdenResponse")
    @Action(input = "http://services/Publicador/getDTCantidadOrdenRequest", output = "http://services/Publicador/getDTCantidadOrdenResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://services/Publicador/getDTCantidadOrden/Fault/Exception")
    })
    public List<DtCantidad> getDTCantidadOrden(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0)
        throws Exception_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<services.DtCambioEstado>
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getEstadosOrden", targetNamespace = "http://services/", className = "services.GetEstadosOrden")
    @ResponseWrapper(localName = "getEstadosOrdenResponse", targetNamespace = "http://services/", className = "services.GetEstadosOrdenResponse")
    @Action(input = "http://services/Publicador/getEstadosOrdenRequest", output = "http://services/Publicador/getEstadosOrdenResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://services/Publicador/getEstadosOrden/Fault/Exception")
    })
    public List<DtCambioEstado> getEstadosOrden(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0)
        throws Exception_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns services.DetallesEnvio
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getDetallesEnvio", targetNamespace = "http://services/", className = "services.GetDetallesEnvio")
    @ResponseWrapper(localName = "getDetallesEnvioResponse", targetNamespace = "http://services/", className = "services.GetDetallesEnvioResponse")
    @Action(input = "http://services/Publicador/getDetallesEnvioRequest", output = "http://services/Publicador/getDetallesEnvioResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://services/Publicador/getDetallesEnvio/Fault/Exception")
    })
    public DetallesEnvio getDetallesEnvio(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0)
        throws Exception_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "agregarEstadoAUnaOrden", targetNamespace = "http://services/", className = "services.AgregarEstadoAUnaOrden")
    @ResponseWrapper(localName = "agregarEstadoAUnaOrdenResponse", targetNamespace = "http://services/", className = "services.AgregarEstadoAUnaOrdenResponse")
    @Action(input = "http://services/Publicador/agregarEstadoAUnaOrdenRequest", output = "http://services/Publicador/agregarEstadoAUnaOrdenResponse")
    public void agregarEstadoAUnaOrden(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws Exception_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "agregarAlCarrito", targetNamespace = "http://services/", className = "services.AgregarAlCarrito")
    @ResponseWrapper(localName = "agregarAlCarritoResponse", targetNamespace = "http://services/", className = "services.AgregarAlCarritoResponse")
    @Action(input = "http://services/Publicador/agregarAlCarritoRequest", output = "http://services/Publicador/agregarAlCarritoResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://services/Publicador/agregarAlCarrito/Fault/Exception")
    })
    public void agregarAlCarrito(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2)
        throws Exception_Exception
    ;

    /**
     * 
     * @return
     *     returns java.util.List<services.DtProducto>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "listarDTProductos", targetNamespace = "http://services/", className = "services.ListarDTProductos")
    @ResponseWrapper(localName = "listarDTProductosResponse", targetNamespace = "http://services/", className = "services.ListarDTProductosResponse")
    @Action(input = "http://services/Publicador/listarDTProductosRequest", output = "http://services/Publicador/listarDTProductosResponse")
    public List<DtProducto> listarDTProductos();

    /**
     * 
     * @return
     *     returns java.util.List<services.DtCategoria>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "listarCategorias", targetNamespace = "http://services/", className = "services.ListarCategorias")
    @ResponseWrapper(localName = "listarCategoriasResponse", targetNamespace = "http://services/", className = "services.ListarCategoriasResponse")
    @Action(input = "http://services/Publicador/listarCategoriasRequest", output = "http://services/Publicador/listarCategoriasResponse")
    public List<DtCategoria> listarCategorias();

    /**
     * 
     * @return
     *     returns java.util.List<services.DtCategoria>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "listarCategoriasConProductos", targetNamespace = "http://services/", className = "services.ListarCategoriasConProductos")
    @ResponseWrapper(localName = "listarCategoriasConProductosResponse", targetNamespace = "http://services/", className = "services.ListarCategoriasConProductosResponse")
    @Action(input = "http://services/Publicador/listarCategoriasConProductosRequest", output = "http://services/Publicador/listarCategoriasConProductosResponse")
    public List<DtCategoria> listarCategoriasConProductos();

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "cambiarNotificaciones", targetNamespace = "http://services/", className = "services.CambiarNotificaciones")
    @ResponseWrapper(localName = "cambiarNotificacionesResponse", targetNamespace = "http://services/", className = "services.CambiarNotificacionesResponse")
    @Action(input = "http://services/Publicador/cambiarNotificacionesRequest", output = "http://services/Publicador/cambiarNotificacionesResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://services/Publicador/cambiarNotificaciones/Fault/UsuarioNoExisteException")
    })
    public void cambiarNotificaciones(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        boolean arg1)
        throws UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<services.DtOrdenMinima>
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getOrdenesMinimas", targetNamespace = "http://services/", className = "services.GetOrdenesMinimas")
    @ResponseWrapper(localName = "getOrdenesMinimasResponse", targetNamespace = "http://services/", className = "services.GetOrdenesMinimasResponse")
    @Action(input = "http://services/Publicador/getOrdenesMinimasRequest", output = "http://services/Publicador/getOrdenesMinimasResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://services/Publicador/getOrdenesMinimas/Fault/UsuarioNoExisteException")
    })
    public List<DtOrdenMinima> getOrdenesMinimas(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<services.DtReclamo>
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getReclamosProveedor", targetNamespace = "http://services/", className = "services.GetReclamosProveedor")
    @ResponseWrapper(localName = "getReclamosProveedorResponse", targetNamespace = "http://services/", className = "services.GetReclamosProveedorResponse")
    @Action(input = "http://services/Publicador/getReclamosProveedorRequest", output = "http://services/Publicador/getReclamosProveedorResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://services/Publicador/getReclamosProveedor/Fault/Exception")
    })
    public List<DtReclamo> getReclamosProveedor(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws Exception_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<services.DtProducto>
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getProductosProveedor", targetNamespace = "http://services/", className = "services.GetProductosProveedor")
    @ResponseWrapper(localName = "getProductosProveedorResponse", targetNamespace = "http://services/", className = "services.GetProductosProveedorResponse")
    @Action(input = "http://services/Publicador/getProductosProveedorRequest", output = "http://services/Publicador/getProductosProveedorResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://services/Publicador/getProductosProveedor/Fault/Exception")
    })
    public List<DtProducto> getProductosProveedor(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws Exception_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws ProductoNoExisteException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCategoriasProducto", targetNamespace = "http://services/", className = "services.GetCategoriasProducto")
    @ResponseWrapper(localName = "getCategoriasProductoResponse", targetNamespace = "http://services/", className = "services.GetCategoriasProductoResponse")
    @Action(input = "http://services/Publicador/getCategoriasProductoRequest", output = "http://services/Publicador/getCategoriasProductoResponse", fault = {
        @FaultAction(className = ProductoNoExisteException_Exception.class, value = "http://services/Publicador/getCategoriasProducto/Fault/ProductoNoExisteException")
    })
    public List<String> getCategoriasProducto(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0)
        throws ProductoNoExisteException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @param arg7
     * @param arg6
     * @param arg9
     * @param arg8
     * @throws CategoriaNoPuedeTenerProductosException_Exception
     * @throws CategoriaNoExisteException_Exception
     * @throws IOException_Exception
     * @throws UsuarioNoExisteException_Exception
     * @throws ProductoRepetidoException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "altaProducto", targetNamespace = "http://services/", className = "services.AltaProducto")
    @ResponseWrapper(localName = "altaProductoResponse", targetNamespace = "http://services/", className = "services.AltaProductoResponse")
    @Action(input = "http://services/Publicador/altaProductoRequest", output = "http://services/Publicador/altaProductoResponse", fault = {
        @FaultAction(className = ProductoRepetidoException_Exception.class, value = "http://services/Publicador/altaProducto/Fault/ProductoRepetidoException"),
        @FaultAction(className = CategoriaNoPuedeTenerProductosException_Exception.class, value = "http://services/Publicador/altaProducto/Fault/CategoriaNoPuedeTenerProductosException"),
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://services/Publicador/altaProducto/Fault/UsuarioNoExisteException"),
        @FaultAction(className = CategoriaNoExisteException_Exception.class, value = "http://services/Publicador/altaProducto/Fault/CategoriaNoExisteException"),
        @FaultAction(className = IOException_Exception.class, value = "http://services/Publicador/altaProducto/Fault/IOException")
    })
    public void altaProducto(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        int arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        float arg4,
        @WebParam(name = "arg5", targetNamespace = "")
        List<String> arg5,
        @WebParam(name = "arg6", targetNamespace = "")
        List<String> arg6,
        @WebParam(name = "arg7", targetNamespace = "")
        List<byte[]> arg7,
        @WebParam(name = "arg8", targetNamespace = "")
        List<String> arg8,
        @WebParam(name = "arg9", targetNamespace = "")
        String arg9)
        throws CategoriaNoExisteException_Exception, CategoriaNoPuedeTenerProductosException_Exception, IOException_Exception, ProductoRepetidoException_Exception, UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "altaReclamo", targetNamespace = "http://services/", className = "services.AltaReclamo")
    @ResponseWrapper(localName = "altaReclamoResponse", targetNamespace = "http://services/", className = "services.AltaReclamoResponse")
    @Action(input = "http://services/Publicador/altaReclamoRequest", output = "http://services/Publicador/altaReclamoResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://services/Publicador/altaReclamo/Fault/UsuarioNoExisteException")
    })
    public void altaReclamo(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        int arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        int arg4,
        @WebParam(name = "arg5", targetNamespace = "")
        int arg5)
        throws UsuarioNoExisteException_Exception
    ;

}
